version: '3.8'

services:
  keycloak:
    image: quay.io/keycloak/keycloak:26.0.5-0
    container_name: keycloak
    command:
      - start-dev
      - --import-realm
      # - --features=dpop
    environment:
      - KC_HOSTNAME=issuer.myddns.me
      - KC_HOSTNAME_URL=https://issuer.myddns.me/idp
      - KC_HOSTNAME_ADMIN_URL=https://issuer.myddns.me/idp
      - KC_HTTP_RELATIVE_PATH=/idp
      - KC_HTTPS_PORT=8445
      - KC_HTTPS_CERTIFICATE_FILE=/etc/ssl/certs/keycloak.tls.crt
      - KC_HTTPS_CERTIFICATE_KEY_FILE=/etc/ssl/certs/keycloak.tls.key
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      # pentru postgres
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak_password
    volumes:
      - ../services/authentic-source/keycloak/extra/health-check.sh:/opt/keycloak/health-check.sh
      - ../services/authentic-source/keycloak/realms/:/opt/keycloak/data/import
      - ../services/authentic-source/keycloak/certs/keycloak.tls.crt:/etc/ssl/certs/keycloak.tls.crt
      - ../services/authentic-source/keycloak/certs/keycloak.tls.key:/etc/ssl/certs/keycloak.tls.key
      - ../services/authentic-source/keycloak/themes:/opt/keycloak/themes
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "/opt/keycloak/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 10
      
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak_password
    volumes:
      - docker-compose_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  ipfs:
    container_name: ipfs
    image: ipfs/kubo:v0.35.0
    ports:
      - "4001:4001"          # Swarm port
      - "4001:4001/udp"      # QUIC
    volumes:
      - ipfs_data:/data/ipfs
      - ipfs_staging:/export     
    environment:
      - IPFS_PROFILE=server
      - IPFS_Datastore_StorageMax=1GB
      - IPFS_Datastore_GCPeriod=1h
    restart: unless-stopped
  
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    # command: redis-server --requirepass mypassword
    volumes:
      - redis_data:/data
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      interval: 1s
      timeout: 3s
      retries: 30

  crl_publisher:
    image: navzar05/crl_publisher:dev-sol 
    container_name: crl_publisher
    environment:
      - TOKEN_PIN=Andrei2002#
      - CERT_LABEL=IssuerECKey
      - PKCS11_LIB_PATH=/usr/lib/libeToken.so
      - REDIS_HOST=redis
      - REDIS_PASSWORD=mypassword
      - INITIAL_PUBLISH=1
      - ABI_FILE_PATH=/app/crl_deployment.json
      - CONTRACT_PATH=/app/solidity/CRLRegistry.sol
      - PRIVATE_KEY=0x3d0be1f04e66966e5c2138f70b50faffc5634a36b50ef8d76d80093dc9c2f650
      - RPC_URL=https://ethereum-holesky-rpc.publicnode.com
      - IPFS_PINNING_ENDPOINT=http://ipfs:5001/api/v0/add
      - PINATA_API_KEY=a2e74131d851ebe3156a
      - PINATA_SECRET_KEY=264d2b858cd60a2c9ff1b8ea4e6a73ef4ab1410c4fb4d612e7f81ea6a22f35ec
      - REDIS_PORT=6379
      - INITIAL_PUBLISH=1
      - USE_IPFS=1
      - USE_BLOB=1
    volumes:
      - ./crl_deployment.json:/app/crl_deployment.json
      - /run/pcscd/pcscd.comm:/run/pcscd/pcscd.comm
    # depends_on:

  authz-spring-server:
    image: navzar05/authz-spring-server:dev
    container_name: authz-spring-server
    depends_on:
      postgres-spring:
          condition: service_healthy


  postgres-spring:
    image: postgres:16
    container_name: postgres-spring
    environment:
      - POSTGRES_DB=authdb
      - POSTGRES_USER=spring
      - POSTGRES_PASSWORD=spring_password
    volumes:
      - docker-compose_postgres-spring_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spring -d authdb"]
      interval: 5s
      timeout: 5s
      retries: 5


  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "443:443"
      - "9000:9000"
    volumes:
      - ../services/nginx-proxy/certs/fullchain.pem:/etc/nginx/nginx.crt:ro
      - ../services/nginx-proxy/certs/privkey.pem:/etc/nginx/nginx.key:ro
      - ../config/ca/ca.crt:/etc/ssl/certs/ca.crt:ro
      - ../services/nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - authz-spring-server
      - issuer-server


  issuer-server:
    image: issuer_server:dev-agnostic
    container_name: issuer-server
    environment:
      - BLOCKCHAIN_CONTRACT_ADDRESS=0x84a83892cb0608c5dfDa5EBD7398d2c3EfF0988d
    volumes:
      - /run/pcscd/pcscd.comm:/run/pcscd/pcscd.comm
    depends_on:
      keycloak:
        condition: service_healthy


volumes:
  docker-compose_postgres_data:
 #   external: true
  docker-compose_postgres-spring_data:
  redis_data:
  ipfs_data:
  ipfs_staging:
